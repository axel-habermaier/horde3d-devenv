using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Infrastructure.Core.Resources;
using System.Runtime.Serialization;
using Infrastructure.Core.Server;
using Infrastructure.Core.SceneNodes;

namespace Infrastructure.Core.Messages
{
	/// <summary>
	/// Defines the type of a message.
	/// </summary>
	public enum MessageType
	{
		/// <summary>
		/// The message contains debugging information.
		/// </summary>
		DebugInfo,
		/// <summary>
		/// The message contains non critical information.
		/// </summary>
		Info,
		/// <summary>
		/// The message is a warning, i.e. an error from which the system could recover.
		/// </summary>
		Warning,
		/// <summary>
		/// The message is a critical error.
		/// </summary>
		Error,
		/// <summary>
		/// The message type is unknown.
		/// </summary>
		Unknown
	}

	/// <summary>
	/// Defines the message categories.
	/// </summary>
	public enum MessageCategory
	{
		/// <summary>
		/// All messages in this category were generated by Horde3D or the system during a debugging session.
		/// </summary>
		DebugSession,
		/// <summary>
		/// All messages in this category were generated by the debugger.
		/// </summary>
		System
	}

	[DataContract]
	public class Message
	{
		/// <summary>
		/// Gets the message's type.
		/// </summary>
		[DataMember]
		public MessageType MessageType { get; protected set; }

		/// <summary>
		/// Gets the content of the message.
		/// </summary>
		[DataMember]
		public string MessageContent { get; protected set; }

		/// <summary>
		/// Gets the time the message was created.
		/// </summary>
		[DataMember]
		public DateTime Time { get; protected set; }

		/// <summary>
		/// The category this message belongs to.
		/// </summary>
		[DataMember]
		public MessageCategory Category { get; protected set; }

		/// <summary>
		/// Initializes a new message instance.
		/// </summary>
		/// <param name="messageContent">The content of the message.</param>
		/// <param name="messageType">The message's type.</param>
		/// <param name="time">The time the message was created.</param>
		/// <param name="category">The category this message belongs to.</param>
		public Message(string messageContent, MessageType messageType, DateTime time, MessageCategory category)
		{
			MessageContent = messageContent;
			MessageType = messageType;
			Time = time;
			Category = category;
		}

		/// <summary>
		/// Initializes a new message instance.
		/// </summary>
		public Message()
		{

		}
	}

	public class Horde3DMessage : Message
	{
		/// <summary>
		/// Gets the associated resource.
		/// </summary>
		[DataMember]
		public Resource Resource { get; private set; }

		/// <summary>
		/// Gets the associated scene node.
		/// </summary>
		[DataMember]
		public SceneNode SceneNode { get; private set; }

		/// <summary>
		/// Gets the message's generation time.
		/// </summary>
		[DataMember]
		public float Horde3DTime { get; private set; }

		/// <summary>
		/// Initializes a new Horde3D message instance.
		/// </summary>
		/// <param name="messageContent">The message's content.</param>
		/// <param name="level">The Horde3D message level.</param>
		/// <param name="horde3DTime">The Horde3D time when the message was generated.</param>
		internal Horde3DMessage(string messageContent, int level, float horde3DTime)
		{
			MessageContent = messageContent;
			Horde3DTime = horde3DTime;
			Time = Horde3DDebugger.Instance.StartTime.AddSeconds(horde3DTime);
			Category = MessageCategory.DebugSession;

			switch (level)
			{
				case 1: MessageType = MessageType.Error; break;
				case 2: MessageType = MessageType.Warning; break;
				case 3: MessageType = MessageType.Info; break;
				case 4: MessageType = MessageType.DebugInfo; break;
				default: MessageType = MessageType.Unknown; break;
			}

			// TODO: Parse message to find the associated scene node or resource.
		}

		/// <summary>
		/// Initializes a new Horde3D message instance.
		/// </summary>
		public Horde3DMessage()
		{

		}
	}
}
