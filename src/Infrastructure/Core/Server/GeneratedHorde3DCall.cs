//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infrastructure.Core.Server
{
    using System;
    
    
    public static partial class Horde3DCall
    {
        
        public static string Horde3DVersion
        {
            get
            {
                return "Horde3D 1.0.0 Beta3";
            }
        }
        
        public static event GetVersionStringHandler GetVersionString;
        
        public static event CheckExtensionHandler CheckExtension;
        
        public static event InitHandler Init;
        
        public static event ReleaseHandler Release;
        
        public static event SetupViewportHandler SetupViewport;
        
        public static event RenderHandler Render;
        
        public static event FinalizeFrameHandler FinalizeFrame;
        
        public static event ClearHandler Clear;
        
        public static event GetMessageHandler GetMessage;
        
        public static event GetOptionHandler GetOption;
        
        public static event SetOptionHandler SetOption;
        
        public static event GetStatHandler GetStat;
        
        public static event ShowOverlayHandler ShowOverlay;
        
        public static event ClearOverlaysHandler ClearOverlays;
        
        public static event GetResourceTypeHandler GetResourceType;
        
        public static event GetResourceNameHandler GetResourceName;
        
        public static event GetNextResourceHandler GetNextResource;
        
        public static event FindResourceHandler FindResource;
        
        public static event AddResourceHandler AddResource;
        
        public static event CloneResourceHandler CloneResource;
        
        public static event RemoveResourceHandler RemoveResource;
        
        public static event IsResourceLoadedHandler IsResourceLoaded;
        
        public static event LoadResourceHandler LoadResource;
        
        public static event UnloadResourceHandler UnloadResource;
        
        public static event GetResourceParamiHandler GetResourceParami;
        
        public static event SetResourceParamiHandler SetResourceParami;
        
        public static event GetResourceParamfHandler GetResourceParamf;
        
        public static event SetResourceParamfHandler SetResourceParamf;
        
        public static event GetResourceParamstrHandler GetResourceParamstr;
        
        public static event SetResourceParamstrHandler SetResourceParamstr;
        
        public static event GetResourceDataHandler GetResourceData;
        
        public static event UpdateResourceDataHandler UpdateResourceData;
        
        public static event QueryUnloadedResourceHandler QueryUnloadedResource;
        
        public static event ReleaseUnusedResourcesHandler ReleaseUnusedResources;
        
        public static event CreateTexture2DHandler CreateTexture2D;
        
        public static event SetShaderPreamblesHandler SetShaderPreambles;
        
        public static event SetMaterialUniformHandler SetMaterialUniform;
        
        public static event SetPipelineStageActivationHandler SetPipelineStageActivation;
        
        public static event GetPipelineRenderTargetDataHandler GetPipelineRenderTargetData;
        
        public static event GetNodeTypeHandler GetNodeType;
        
        public static event GetNodeParentHandler GetNodeParent;
        
        public static event SetNodeParentHandler SetNodeParent;
        
        public static event GetNodeChildHandler GetNodeChild;
        
        public static event AddNodesHandler AddNodes;
        
        public static event RemoveNodeHandler RemoveNode;
        
        public static event SetNodeActivationHandler SetNodeActivation;
        
        public static event CheckNodeTransformFlagHandler CheckNodeTransformFlag;
        
        public static event GetNodeTransformHandler GetNodeTransform;
        
        public static event SetNodeTransformHandler SetNodeTransform;
        
        public static event GetNodeTransformMatricesHandler GetNodeTransformMatrices;
        
        public static event SetNodeTransformMatrixHandler SetNodeTransformMatrix;
        
        public static event GetNodeParamfHandler GetNodeParamf;
        
        public static event SetNodeParamfHandler SetNodeParamf;
        
        public static event GetNodeParamiHandler GetNodeParami;
        
        public static event SetNodeParamiHandler SetNodeParami;
        
        public static event GetNodeParamstrHandler GetNodeParamstr;
        
        public static event SetNodeParamstrHandler SetNodeParamstr;
        
        public static event GetNodeAABBHandler GetNodeAABB;
        
        public static event FindNodesHandler FindNodes;
        
        public static event GetNodeFindResultHandler GetNodeFindResult;
        
        public static event CastRayHandler CastRay;
        
        public static event GetCastRayResultHandler GetCastRayResult;
        
        public static event CheckNodeVisibilityHandler CheckNodeVisibility;
        
        public static event AddGroupNodeHandler AddGroupNode;
        
        public static event AddModelNodeHandler AddModelNode;
        
        public static event SetupModelAnimStageHandler SetupModelAnimStage;
        
        public static event SetModelAnimParamsHandler SetModelAnimParams;
        
        public static event SetModelMorpherHandler SetModelMorpher;
        
        public static event AddMeshNodeHandler AddMeshNode;
        
        public static event AddJointNodeHandler AddJointNode;
        
        public static event AddLightNodeHandler AddLightNode;
        
        public static event SetLightContextsHandler SetLightContexts;
        
        public static event AddCameraNodeHandler AddCameraNode;
        
        public static event SetupCameraViewHandler SetupCameraView;
        
        public static event GetCameraProjectionMatrixHandler GetCameraProjectionMatrix;
        
        public static event AddEmitterNodeHandler AddEmitterNode;
        
        public static event AdvanceEmitterTimeHandler AdvanceEmitterTime;
        
        public static event HasEmitterFinishedHandler HasEmitterFinished;
        
        public static void OnGetVersionString(string returnValue)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetVersionString");
            }
            if ((GetVersionString != null))
            {
                GetVersionString(returnValue);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetVersionString");
            }
        }
        
        public static void OnCheckExtension(bool returnValue, string extensionName)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("CheckExtension");
            }
            if ((CheckExtension != null))
            {
                CheckExtension(returnValue, extensionName);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("CheckExtension");
            }
        }
        
        public static void OnInit(bool returnValue)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("Init");
            }
            if ((Init != null))
            {
                Init(returnValue);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("Init");
            }
        }
        
        public static void OnRelease()
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("Release");
            }
            if ((Release != null))
            {
                Release();
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("Release");
            }
        }
        
        public static void OnSetupViewport(int x, int y, int width, int height, bool resizeBuffers)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetupViewport");
            }
            if ((SetupViewport != null))
            {
                SetupViewport(x, y, width, height, resizeBuffers);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetupViewport");
            }
        }
        
        public static void OnRender(bool returnValue, int cameraNode)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("Render");
            }
            if ((Render != null))
            {
                Render(returnValue, cameraNode);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("Render");
            }
        }
        
        public static void OnFinalizeFrame(bool returnValue)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("FinalizeFrame");
            }
            if ((FinalizeFrame != null))
            {
                FinalizeFrame(returnValue);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("FinalizeFrame");
            }
        }
        
        public static void OnClear()
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("Clear");
            }
            if ((Clear != null))
            {
                Clear();
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("Clear");
            }
        }
        
        public static void OnGetMessage(string returnValue, int level, float time)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetMessage");
            }
            if ((GetMessage != null))
            {
                GetMessage(returnValue, level, time);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetMessage");
            }
        }
        
        public static void OnGetOption(float returnValue, int param)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetOption");
            }
            if ((GetOption != null))
            {
                GetOption(returnValue, Enum<Horde3DNET.Horde3D.EngineOptions>.Cast(param));
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetOption");
            }
        }
        
        public static void OnSetOption(bool returnValue, int param, float value)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetOption");
            }
            if ((SetOption != null))
            {
                SetOption(returnValue, Enum<Horde3DNET.Horde3D.EngineOptions>.Cast(param), value);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetOption");
            }
        }
        
        public static void OnGetStat(float returnValue, int param, bool reset)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetStat");
            }
            if ((GetStat != null))
            {
                GetStat(returnValue, Enum<Horde3DNET.Horde3D.EngineStats>.Cast(param), reset);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetStat");
            }
        }
        
        public static void OnShowOverlay(
                    float x_tl, 
                    float y_tl, 
                    float u_tl, 
                    float v_tl, 
                    float x_bl, 
                    float y_bl, 
                    float u_bl, 
                    float v_bl, 
                    float x_br, 
                    float y_br, 
                    float u_br, 
                    float v_br, 
                    float x_tr, 
                    float y_tr, 
                    float u_tr, 
                    float v_tr, 
                    float colR, 
                    float colG, 
                    float colB, 
                    float colA, 
                    int materialRes, 
                    int layer)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("ShowOverlay");
            }
            if ((ShowOverlay != null))
            {
                ShowOverlay(x_tl, y_tl, u_tl, v_tl, x_bl, y_bl, u_bl, v_bl, x_br, y_br, u_br, v_br, x_tr, y_tr, u_tr, v_tr, colR, colG, colB, colA, materialRes, layer);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("ShowOverlay");
            }
        }
        
        public static void OnClearOverlays()
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("ClearOverlays");
            }
            if ((ClearOverlays != null))
            {
                ClearOverlays();
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("ClearOverlays");
            }
        }
        
        public static void OnGetResourceType(int returnValue, int res)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetResourceType");
            }
            if ((GetResourceType != null))
            {
                GetResourceType(returnValue, res);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetResourceType");
            }
        }
        
        public static void OnGetResourceName(string returnValue, int res)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetResourceName");
            }
            if ((GetResourceName != null))
            {
                GetResourceName(returnValue, res);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetResourceName");
            }
        }
        
        public static void OnGetNextResource(int returnValue, int type, int start)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetNextResource");
            }
            if ((GetNextResource != null))
            {
                GetNextResource(returnValue, type, start);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetNextResource");
            }
        }
        
        public static void OnFindResource(int returnValue, int type, string name)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("FindResource");
            }
            if ((FindResource != null))
            {
                FindResource(returnValue, type, name);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("FindResource");
            }
        }
        
        public static void OnAddResource(int returnValue, int type, string name, int flags)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("AddResource");
            }
            if ((AddResource != null))
            {
                AddResource(returnValue, type, name, flags);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("AddResource");
            }
        }
        
        public static void OnCloneResource(int returnValue, int sourceRes, string name)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("CloneResource");
            }
            if ((CloneResource != null))
            {
                CloneResource(returnValue, sourceRes, name);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("CloneResource");
            }
        }
        
        public static void OnRemoveResource(int returnValue, int res)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("RemoveResource");
            }
            if ((RemoveResource != null))
            {
                RemoveResource(returnValue, res);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("RemoveResource");
            }
        }
        
        public static void OnIsResourceLoaded(bool returnValue, int res)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("IsResourceLoaded");
            }
            if ((IsResourceLoaded != null))
            {
                IsResourceLoaded(returnValue, res);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("IsResourceLoaded");
            }
        }
        
        public static void OnLoadResource(bool returnValue, int res, string data, int size)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("LoadResource");
            }
            if ((LoadResource != null))
            {
                LoadResource(returnValue, res, data, size);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("LoadResource");
            }
        }
        
        public static void OnUnloadResource(bool returnValue, int res)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("UnloadResource");
            }
            if ((UnloadResource != null))
            {
                UnloadResource(returnValue, res);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("UnloadResource");
            }
        }
        
        public static void OnGetResourceParami(int returnValue, int res, int param)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetResourceParami");
            }
            if ((GetResourceParami != null))
            {
                GetResourceParami(returnValue, res, param);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetResourceParami");
            }
        }
        
        public static void OnSetResourceParami(bool returnValue, int res, int param, int value)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetResourceParami");
            }
            if ((SetResourceParami != null))
            {
                SetResourceParami(returnValue, res, param, value);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetResourceParami");
            }
        }
        
        public static void OnGetResourceParamf(float returnValue, int res, int param)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetResourceParamf");
            }
            if ((GetResourceParamf != null))
            {
                GetResourceParamf(returnValue, res, param);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetResourceParamf");
            }
        }
        
        public static void OnSetResourceParamf(bool returnValue, int res, int param, float value)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetResourceParamf");
            }
            if ((SetResourceParamf != null))
            {
                SetResourceParamf(returnValue, res, param, value);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetResourceParamf");
            }
        }
        
        public static void OnGetResourceParamstr(string returnValue, int res, int param)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetResourceParamstr");
            }
            if ((GetResourceParamstr != null))
            {
                GetResourceParamstr(returnValue, res, param);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetResourceParamstr");
            }
        }
        
        public static void OnSetResourceParamstr(bool returnValue, int res, int param, string value)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetResourceParamstr");
            }
            if ((SetResourceParamstr != null))
            {
                SetResourceParamstr(returnValue, res, param, value);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetResourceParamstr");
            }
        }
        
        public static void OnGetResourceData(System.IntPtr returnValue, int res, int param)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetResourceData");
            }
            if ((GetResourceData != null))
            {
                GetResourceData(returnValue, res, param);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetResourceData");
            }
        }
        
        public static void OnUpdateResourceData(bool returnValue, int res, int param, System.IntPtr data, int size)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("UpdateResourceData");
            }
            if ((UpdateResourceData != null))
            {
                UpdateResourceData(returnValue, res, param, data, size);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("UpdateResourceData");
            }
        }
        
        public static void OnQueryUnloadedResource(int returnValue, int index)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("QueryUnloadedResource");
            }
            if ((QueryUnloadedResource != null))
            {
                QueryUnloadedResource(returnValue, index);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("QueryUnloadedResource");
            }
        }
        
        public static void OnReleaseUnusedResources()
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("ReleaseUnusedResources");
            }
            if ((ReleaseUnusedResources != null))
            {
                ReleaseUnusedResources();
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("ReleaseUnusedResources");
            }
        }
        
        public static void OnCreateTexture2D(int returnValue, string name, int flags, int width, int height, bool renderable)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("CreateTexture2D");
            }
            if ((CreateTexture2D != null))
            {
                CreateTexture2D(returnValue, name, flags, width, height, renderable);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("CreateTexture2D");
            }
        }
        
        public static void OnSetShaderPreambles(string vertPreamble, string fragPreamble)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetShaderPreambles");
            }
            if ((SetShaderPreambles != null))
            {
                SetShaderPreambles(vertPreamble, fragPreamble);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetShaderPreambles");
            }
        }
        
        public static void OnSetMaterialUniform(bool returnValue, int materialRes, string name, float a, float b, float c, float d)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetMaterialUniform");
            }
            if ((SetMaterialUniform != null))
            {
                SetMaterialUniform(returnValue, materialRes, name, a, b, c, d);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetMaterialUniform");
            }
        }
        
        public static void OnSetPipelineStageActivation(bool returnValue, int pipelineRes, string stageName, bool enabled)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetPipelineStageActivation");
            }
            if ((SetPipelineStageActivation != null))
            {
                SetPipelineStageActivation(returnValue, pipelineRes, stageName, enabled);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetPipelineStageActivation");
            }
        }
        
        public static void OnGetPipelineRenderTargetData(bool returnValue, int pipelineRes, string targetName, int bufIndex, int width, int height, int compCount, float[] dataBuffer, int bufferSize)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetPipelineRenderTargetData");
            }
            if ((GetPipelineRenderTargetData != null))
            {
                GetPipelineRenderTargetData(returnValue, pipelineRes, targetName, bufIndex, width, height, compCount, dataBuffer, bufferSize);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetPipelineRenderTargetData");
            }
        }
        
        public static void OnGetNodeType(int returnValue, int node)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetNodeType");
            }
            if ((GetNodeType != null))
            {
                GetNodeType(returnValue, node);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetNodeType");
            }
        }
        
        public static void OnGetNodeParent(int returnValue, int node)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetNodeParent");
            }
            if ((GetNodeParent != null))
            {
                GetNodeParent(returnValue, node);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetNodeParent");
            }
        }
        
        public static void OnSetNodeParent(bool returnValue, int node, int parent)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetNodeParent");
            }
            if ((SetNodeParent != null))
            {
                SetNodeParent(returnValue, node, parent);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetNodeParent");
            }
        }
        
        public static void OnGetNodeChild(int returnValue, int node, int index)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetNodeChild");
            }
            if ((GetNodeChild != null))
            {
                GetNodeChild(returnValue, node, index);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetNodeChild");
            }
        }
        
        public static void OnAddNodes(int returnValue, int parent, int sceneGraphRes)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("AddNodes");
            }
            if ((AddNodes != null))
            {
                AddNodes(returnValue, parent, sceneGraphRes);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("AddNodes");
            }
        }
        
        public static void OnRemoveNode(bool returnValue, int node)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("RemoveNode");
            }
            if ((RemoveNode != null))
            {
                RemoveNode(returnValue, node);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("RemoveNode");
            }
        }
        
        public static void OnSetNodeActivation(bool returnValue, int node, bool active)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetNodeActivation");
            }
            if ((SetNodeActivation != null))
            {
                SetNodeActivation(returnValue, node, active);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetNodeActivation");
            }
        }
        
        public static void OnCheckNodeTransformFlag(bool returnValue, int node, bool reset)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("CheckNodeTransformFlag");
            }
            if ((CheckNodeTransformFlag != null))
            {
                CheckNodeTransformFlag(returnValue, node, reset);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("CheckNodeTransformFlag");
            }
        }
        
        public static void OnGetNodeTransform(bool returnValue, int node, float tx, float ty, float tz, float rx, float ry, float rz, float sx, float sy, float sz)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetNodeTransform");
            }
            if ((GetNodeTransform != null))
            {
                GetNodeTransform(returnValue, node, tx, ty, tz, rx, ry, rz, sx, sy, sz);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetNodeTransform");
            }
        }
        
        public static void OnSetNodeTransform(bool returnValue, int node, float tx, float ty, float tz, float rx, float ry, float rz, float sx, float sy, float sz)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetNodeTransform");
            }
            if ((SetNodeTransform != null))
            {
                SetNodeTransform(returnValue, node, tx, ty, tz, rx, ry, rz, sx, sy, sz);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetNodeTransform");
            }
        }
        
        public static void OnGetNodeTransformMatrices(bool returnValue, int node, float[] relMat, float[] absMat)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetNodeTransformMatrices");
            }
            if ((GetNodeTransformMatrices != null))
            {
                GetNodeTransformMatrices(returnValue, node, relMat, absMat);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetNodeTransformMatrices");
            }
        }
        
        public static void OnSetNodeTransformMatrix(bool returnValue, int node, float[] mat4x4)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetNodeTransformMatrix");
            }
            if ((SetNodeTransformMatrix != null))
            {
                SetNodeTransformMatrix(returnValue, node, mat4x4);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetNodeTransformMatrix");
            }
        }
        
        public static void OnGetNodeParamf(float returnValue, int node, int param)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetNodeParamf");
            }
            if ((GetNodeParamf != null))
            {
                GetNodeParamf(returnValue, node, param);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetNodeParamf");
            }
        }
        
        public static void OnSetNodeParamf(bool returnValue, int node, int param, float value)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetNodeParamf");
            }
            if ((SetNodeParamf != null))
            {
                SetNodeParamf(returnValue, node, param, value);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetNodeParamf");
            }
        }
        
        public static void OnGetNodeParami(int returnValue, int node, int param)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetNodeParami");
            }
            if ((GetNodeParami != null))
            {
                GetNodeParami(returnValue, node, param);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetNodeParami");
            }
        }
        
        public static void OnSetNodeParami(bool returnValue, int node, int param, int value)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetNodeParami");
            }
            if ((SetNodeParami != null))
            {
                SetNodeParami(returnValue, node, param, value);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetNodeParami");
            }
        }
        
        public static void OnGetNodeParamstr(string returnValue, int node, int param)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetNodeParamstr");
            }
            if ((GetNodeParamstr != null))
            {
                GetNodeParamstr(returnValue, node, param);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetNodeParamstr");
            }
        }
        
        public static void OnSetNodeParamstr(bool returnValue, int node, int param, string value)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetNodeParamstr");
            }
            if ((SetNodeParamstr != null))
            {
                SetNodeParamstr(returnValue, node, param, value);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetNodeParamstr");
            }
        }
        
        public static void OnGetNodeAABB(bool returnValue, int node, float minX, float minY, float minZ, float maxX, float maxY, float maxZ)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetNodeAABB");
            }
            if ((GetNodeAABB != null))
            {
                GetNodeAABB(returnValue, node, minX, minY, minZ, maxX, maxY, maxZ);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetNodeAABB");
            }
        }
        
        public static void OnFindNodes(int returnValue, int startNode, string name, int type)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("FindNodes");
            }
            if ((FindNodes != null))
            {
                FindNodes(returnValue, startNode, name, type);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("FindNodes");
            }
        }
        
        public static void OnGetNodeFindResult(int returnValue, int index)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetNodeFindResult");
            }
            if ((GetNodeFindResult != null))
            {
                GetNodeFindResult(returnValue, index);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetNodeFindResult");
            }
        }
        
        public static void OnCastRay(int returnValue, int node, float ox, float oy, float oz, float dx, float dy, float dz, int numNearest)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("CastRay");
            }
            if ((CastRay != null))
            {
                CastRay(returnValue, node, ox, oy, oz, dx, dy, dz, numNearest);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("CastRay");
            }
        }
        
        public static void OnGetCastRayResult(bool returnValue, int index, int node, float distance, float intersection)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetCastRayResult");
            }
            if ((GetCastRayResult != null))
            {
                GetCastRayResult(returnValue, index, node, distance, intersection);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetCastRayResult");
            }
        }
        
        public static void OnCheckNodeVisibility(int returnValue, int node, int cameraNode, bool checkOcclusion, bool calcLod)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("CheckNodeVisibility");
            }
            if ((CheckNodeVisibility != null))
            {
                CheckNodeVisibility(returnValue, node, cameraNode, checkOcclusion, calcLod);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("CheckNodeVisibility");
            }
        }
        
        public static void OnAddGroupNode(int returnValue, int parent, string name)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("AddGroupNode");
            }
            if ((AddGroupNode != null))
            {
                AddGroupNode(returnValue, parent, name);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("AddGroupNode");
            }
        }
        
        public static void OnAddModelNode(int returnValue, int parent, string name, int geometryRes)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("AddModelNode");
            }
            if ((AddModelNode != null))
            {
                AddModelNode(returnValue, parent, name, geometryRes);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("AddModelNode");
            }
        }
        
        public static void OnSetupModelAnimStage(bool returnValue, int modelNode, int stage, int animationRes, string startNode, bool additive)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetupModelAnimStage");
            }
            if ((SetupModelAnimStage != null))
            {
                SetupModelAnimStage(returnValue, modelNode, stage, animationRes, startNode, additive);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetupModelAnimStage");
            }
        }
        
        public static void OnSetModelAnimParams(bool returnValue, int modelNode, int stage, float time, float weight)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetModelAnimParams");
            }
            if ((SetModelAnimParams != null))
            {
                SetModelAnimParams(returnValue, modelNode, stage, time, weight);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetModelAnimParams");
            }
        }
        
        public static void OnSetModelMorpher(bool returnValue, int modelNode, string target, float weight)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetModelMorpher");
            }
            if ((SetModelMorpher != null))
            {
                SetModelMorpher(returnValue, modelNode, target, weight);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetModelMorpher");
            }
        }
        
        public static void OnAddMeshNode(int returnValue, int parent, string name, int materialRes, int batchStart, int batchCount, int vertRStart, int vertREnd)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("AddMeshNode");
            }
            if ((AddMeshNode != null))
            {
                AddMeshNode(returnValue, parent, name, materialRes, batchStart, batchCount, vertRStart, vertREnd);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("AddMeshNode");
            }
        }
        
        public static void OnAddJointNode(int returnValue, int parent, string name, int jointIndex)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("AddJointNode");
            }
            if ((AddJointNode != null))
            {
                AddJointNode(returnValue, parent, name, jointIndex);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("AddJointNode");
            }
        }
        
        public static void OnAddLightNode(int returnValue, int parent, string name, int materialRes, string lightingContext, string shadowContext)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("AddLightNode");
            }
            if ((AddLightNode != null))
            {
                AddLightNode(returnValue, parent, name, materialRes, lightingContext, shadowContext);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("AddLightNode");
            }
        }
        
        public static void OnSetLightContexts(bool returnValue, int lightNode, string lightingContext, string shadowContext)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetLightContexts");
            }
            if ((SetLightContexts != null))
            {
                SetLightContexts(returnValue, lightNode, lightingContext, shadowContext);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetLightContexts");
            }
        }
        
        public static void OnAddCameraNode(int returnValue, int parent, string name, int pipelineRes)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("AddCameraNode");
            }
            if ((AddCameraNode != null))
            {
                AddCameraNode(returnValue, parent, name, pipelineRes);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("AddCameraNode");
            }
        }
        
        public static void OnSetupCameraView(bool returnValue, int cameraNode, float fov, float aspect, float nearDist, float farDist)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("SetupCameraView");
            }
            if ((SetupCameraView != null))
            {
                SetupCameraView(returnValue, cameraNode, fov, aspect, nearDist, farDist);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("SetupCameraView");
            }
        }
        
        public static void OnGetCameraProjectionMatrix(bool returnValue, int cameraNode, float[] projMat)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("GetCameraProjectionMatrix");
            }
            if ((GetCameraProjectionMatrix != null))
            {
                GetCameraProjectionMatrix(returnValue, cameraNode, projMat);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("GetCameraProjectionMatrix");
            }
        }
        
        public static void OnAddEmitterNode(int returnValue, int parent, string name, int materialRes, int particleEffectRes, int maxParticleCount, int respawnCount)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("AddEmitterNode");
            }
            if ((AddEmitterNode != null))
            {
                AddEmitterNode(returnValue, parent, name, materialRes, particleEffectRes, maxParticleCount, respawnCount);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("AddEmitterNode");
            }
        }
        
        public static void OnAdvanceEmitterTime(bool returnValue, int emitterNode, float timeDelta)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("AdvanceEmitterTime");
            }
            if ((AdvanceEmitterTime != null))
            {
                AdvanceEmitterTime(returnValue, emitterNode, timeDelta);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("AdvanceEmitterTime");
            }
        }
        
        public static void OnHasEmitterFinished(bool returnValue, int emitterNode)
        {
            if ((BeforeFunctionCalled != null))
            {
                BeforeFunctionCalled("HasEmitterFinished");
            }
            if ((HasEmitterFinished != null))
            {
                HasEmitterFinished(returnValue, emitterNode);
            }
            if ((AfterFunctionCalled != null))
            {
                AfterFunctionCalled("HasEmitterFinished");
            }
        }
        
        public delegate void GetVersionStringHandler(string returnValue);
        
        public delegate void CheckExtensionHandler(bool returnValue, string extensionName);
        
        public delegate void InitHandler(bool returnValue);
        
        public delegate void ReleaseHandler();
        
        public delegate void SetupViewportHandler(int x, int y, int width, int height, bool resizeBuffers);
        
        public delegate void RenderHandler(bool returnValue, int cameraNode);
        
        public delegate void FinalizeFrameHandler(bool returnValue);
        
        public delegate void ClearHandler();
        
        public delegate void GetMessageHandler(string returnValue, int level, float time);
        
        public delegate void GetOptionHandler(float returnValue, Horde3DNET.Horde3D.EngineOptions param);
        
        public delegate void SetOptionHandler(bool returnValue, Horde3DNET.Horde3D.EngineOptions param, float value);
        
        public delegate void GetStatHandler(float returnValue, Horde3DNET.Horde3D.EngineStats param, bool reset);
        
        public delegate void ShowOverlayHandler(
                    float x_tl, 
                    float y_tl, 
                    float u_tl, 
                    float v_tl, 
                    float x_bl, 
                    float y_bl, 
                    float u_bl, 
                    float v_bl, 
                    float x_br, 
                    float y_br, 
                    float u_br, 
                    float v_br, 
                    float x_tr, 
                    float y_tr, 
                    float u_tr, 
                    float v_tr, 
                    float colR, 
                    float colG, 
                    float colB, 
                    float colA, 
                    int materialRes, 
                    int layer);
        
        public delegate void ClearOverlaysHandler();
        
        public delegate void GetResourceTypeHandler(int returnValue, int res);
        
        public delegate void GetResourceNameHandler(string returnValue, int res);
        
        public delegate void GetNextResourceHandler(int returnValue, int type, int start);
        
        public delegate void FindResourceHandler(int returnValue, int type, string name);
        
        public delegate void AddResourceHandler(int returnValue, int type, string name, int flags);
        
        public delegate void CloneResourceHandler(int returnValue, int sourceRes, string name);
        
        public delegate void RemoveResourceHandler(int returnValue, int res);
        
        public delegate void IsResourceLoadedHandler(bool returnValue, int res);
        
        public delegate void LoadResourceHandler(bool returnValue, int res, string data, int size);
        
        public delegate void UnloadResourceHandler(bool returnValue, int res);
        
        public delegate void GetResourceParamiHandler(int returnValue, int res, int param);
        
        public delegate void SetResourceParamiHandler(bool returnValue, int res, int param, int value);
        
        public delegate void GetResourceParamfHandler(float returnValue, int res, int param);
        
        public delegate void SetResourceParamfHandler(bool returnValue, int res, int param, float value);
        
        public delegate void GetResourceParamstrHandler(string returnValue, int res, int param);
        
        public delegate void SetResourceParamstrHandler(bool returnValue, int res, int param, string value);
        
        public delegate void GetResourceDataHandler(System.IntPtr returnValue, int res, int param);
        
        public delegate void UpdateResourceDataHandler(bool returnValue, int res, int param, System.IntPtr data, int size);
        
        public delegate void QueryUnloadedResourceHandler(int returnValue, int index);
        
        public delegate void ReleaseUnusedResourcesHandler();
        
        public delegate void CreateTexture2DHandler(int returnValue, string name, int flags, int width, int height, bool renderable);
        
        public delegate void SetShaderPreamblesHandler(string vertPreamble, string fragPreamble);
        
        public delegate void SetMaterialUniformHandler(bool returnValue, int materialRes, string name, float a, float b, float c, float d);
        
        public delegate void SetPipelineStageActivationHandler(bool returnValue, int pipelineRes, string stageName, bool enabled);
        
        public delegate void GetPipelineRenderTargetDataHandler(bool returnValue, int pipelineRes, string targetName, int bufIndex, int width, int height, int compCount, float[] dataBuffer, int bufferSize);
        
        public delegate void GetNodeTypeHandler(int returnValue, int node);
        
        public delegate void GetNodeParentHandler(int returnValue, int node);
        
        public delegate void SetNodeParentHandler(bool returnValue, int node, int parent);
        
        public delegate void GetNodeChildHandler(int returnValue, int node, int index);
        
        public delegate void AddNodesHandler(int returnValue, int parent, int sceneGraphRes);
        
        public delegate void RemoveNodeHandler(bool returnValue, int node);
        
        public delegate void SetNodeActivationHandler(bool returnValue, int node, bool active);
        
        public delegate void CheckNodeTransformFlagHandler(bool returnValue, int node, bool reset);
        
        public delegate void GetNodeTransformHandler(bool returnValue, int node, float tx, float ty, float tz, float rx, float ry, float rz, float sx, float sy, float sz);
        
        public delegate void SetNodeTransformHandler(bool returnValue, int node, float tx, float ty, float tz, float rx, float ry, float rz, float sx, float sy, float sz);
        
        public delegate void GetNodeTransformMatricesHandler(bool returnValue, int node, float[] relMat, float[] absMat);
        
        public delegate void SetNodeTransformMatrixHandler(bool returnValue, int node, float[] mat4x4);
        
        public delegate void GetNodeParamfHandler(float returnValue, int node, int param);
        
        public delegate void SetNodeParamfHandler(bool returnValue, int node, int param, float value);
        
        public delegate void GetNodeParamiHandler(int returnValue, int node, int param);
        
        public delegate void SetNodeParamiHandler(bool returnValue, int node, int param, int value);
        
        public delegate void GetNodeParamstrHandler(string returnValue, int node, int param);
        
        public delegate void SetNodeParamstrHandler(bool returnValue, int node, int param, string value);
        
        public delegate void GetNodeAABBHandler(bool returnValue, int node, float minX, float minY, float minZ, float maxX, float maxY, float maxZ);
        
        public delegate void FindNodesHandler(int returnValue, int startNode, string name, int type);
        
        public delegate void GetNodeFindResultHandler(int returnValue, int index);
        
        public delegate void CastRayHandler(int returnValue, int node, float ox, float oy, float oz, float dx, float dy, float dz, int numNearest);
        
        public delegate void GetCastRayResultHandler(bool returnValue, int index, int node, float distance, float intersection);
        
        public delegate void CheckNodeVisibilityHandler(int returnValue, int node, int cameraNode, bool checkOcclusion, bool calcLod);
        
        public delegate void AddGroupNodeHandler(int returnValue, int parent, string name);
        
        public delegate void AddModelNodeHandler(int returnValue, int parent, string name, int geometryRes);
        
        public delegate void SetupModelAnimStageHandler(bool returnValue, int modelNode, int stage, int animationRes, string startNode, bool additive);
        
        public delegate void SetModelAnimParamsHandler(bool returnValue, int modelNode, int stage, float time, float weight);
        
        public delegate void SetModelMorpherHandler(bool returnValue, int modelNode, string target, float weight);
        
        public delegate void AddMeshNodeHandler(int returnValue, int parent, string name, int materialRes, int batchStart, int batchCount, int vertRStart, int vertREnd);
        
        public delegate void AddJointNodeHandler(int returnValue, int parent, string name, int jointIndex);
        
        public delegate void AddLightNodeHandler(int returnValue, int parent, string name, int materialRes, string lightingContext, string shadowContext);
        
        public delegate void SetLightContextsHandler(bool returnValue, int lightNode, string lightingContext, string shadowContext);
        
        public delegate void AddCameraNodeHandler(int returnValue, int parent, string name, int pipelineRes);
        
        public delegate void SetupCameraViewHandler(bool returnValue, int cameraNode, float fov, float aspect, float nearDist, float farDist);
        
        public delegate void GetCameraProjectionMatrixHandler(bool returnValue, int cameraNode, float[] projMat);
        
        public delegate void AddEmitterNodeHandler(int returnValue, int parent, string name, int materialRes, int particleEffectRes, int maxParticleCount, int respawnCount);
        
        public delegate void AdvanceEmitterTimeHandler(bool returnValue, int emitterNode, float timeDelta);
        
        public delegate void HasEmitterFinishedHandler(bool returnValue, int emitterNode);
    }
}
